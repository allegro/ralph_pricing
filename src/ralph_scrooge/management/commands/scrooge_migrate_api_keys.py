# -*- coding: utf-8 -*-

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import logging

from django.core.management.base import BaseCommand
from django.db.transaction import commit_on_success

from rest_framework.authtoken.models import Token
try:
    from tastypie.models import ApiKey
except ImportError:
    print('Tastypie is not installed. Please install it.')

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    """
    This command copies API keys that already have been generated by TastyPie
    (ApiKey model) into a structure used by DjRF (Token model). If a given key
    or user is already present in the latter, it is skipped with warning.

    Please note that copying API keys via Django models would reset their
    creation date - if you need to keep it, you may be better off with some
    SQL query that copies contents of `tastypie_apikey` table into
    `authtoken_token` table.
    """

    @commit_on_success
    def handle(self, *args, **kwargs):
        logger.info('Migration of API keys (TastyPie -> DjRF) started...')
        counter = 0
        for api_key in ApiKey.objects.all():
            if Token.objects.filter(key=api_key.key).exists():
                msg = (
                    'DjRF Token with API key {} already exists. Skipping...'
                    .format(api_key.key)
                )
                logger.warning(msg)
                continue
            if Token.objects.filter(user=api_key.user).exists():
                msg = (
                    'User "{}" already has DjRF Token. Skipping...'
                    .format(api_key.user.username)
                )
                logger.warning(msg)
                continue
            new_token = Token()
            new_token.user = api_key.user
            new_token.key = api_key.key
            new_token.save()
            counter += 1
        msg = (
            'Migration of API keys (TastyPie -> DjRF) finished. {} keys has '
            'been saved.'.format(counter)
        )
        logger.info(msg)
