{"info":{"version":"","title":"Scrooge API"},"paths":{"/v0.9/teamtimedivision/{team_id}/{year}/{month}/":{"post":{"responses":{"201":{"description":"Created"}},"parameters":[{"$ref":"#/parameters/team_id"},{"$ref":"#/parameters/year"},{"$ref":"#/parameters/month"},{"required":true,"in":"body","name":"payload","schema":{"$ref":"#/definitions/Divisions"}}],"tags":["v0.9"],"operationId":"teamtimedivision_create","summary":"Allocate team's working time to some services","consumes":["application/json"],"description":"Team Time Divisions allow to allocate your team's working time (and\ntherefore costs) into some services (e.g., projects that your team has\nbeen working on). The granularity of such allocations are per-month.\n\nThere are a couple of important things to keep in mind here:\n* services given as uid-111/prod and uid-111/test are two different\nentities, despite the fact that they both share the same UID;\n* percents from the same division should sum up exactly to 100% - if\nyou try to upload a division like 70+10+10 (or 70+10+10+20), you'll\nget a validation error.\n* when you upload two or more divisions for the same team and date\n(year+month), only the last one of them is taken into account (i.e.,\nit effectively overwrites previous ones);\n* your division requires at least one service_uid/environment/percent\nobject to be present (in such case, its ``percent`` field should equal\n100.0);\n* this endpoint is only accessible to team managers. A team manager in\nScrooge's is a person who is associated with a given team, and is\nallowed to allocate team resources (i.e. time) to services.\n"},"get":{"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Divisions"}}},"parameters":[{"$ref":"#/parameters/team_id"},{"$ref":"#/parameters/year"},{"$ref":"#/parameters/month"}],"tags":["v0.9"],"operationId":"teamtimedivision_read","summary":"Fetch time divisions uploaded for given team and month","description":"This operation is provided for symmetry with POST (in case you'd need to\ncheck if Scrooge has correct divisions for your team - although you can\nlook at this data via Scrooge's GUI as well) and it has the same form as\nPOST minus ``payload`` part.\n\nPlease note that this endpoint is only accessible to team managers. A\nteam manager in Scrooge's is a person who is associated with a given\nteam, and is allowed to allocate team resources (i.e. time) to services.\n"}},"/v0.10/service-environment-costs/":{"post":{"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/ServiceEnvironmentCosts"}}},"parameters":[{"required":true,"in":"body","name":"payload","schema":{"required":["service_uid","environment","date_from","date_to","group_by"],"type":"object","properties":{"environment":{"type":"string","description":"e.g. 'prod', 'test', 'dev' etc."},"service_uid":{"type":"string"},"group_by":{"enum":["day","month"],"type":"string"},"date_to":{"type":"string","description":"YYYY-MM-DD"},"date_from":{"type":"string","description":"YYYY-MM-DD"},"types":{"items":{"type":"string"},"type":"array","description":"list of pricing service symbols"},"forecast":{"default":false,"type":"boolean","description":"calculate costs marked as \"forecasted\"; defaults to ``false``\n"}}}}],"tags":["v0.10"],"description":"The ``forecast`` field should be set to ``false`` in most cases - it triggers\ncalculation of costs marked as \"forecasted\" instead of \"normal\" ones.\n\nIf you omit ``types`` field, all pricing services are taken into account.\n\nThe shape of response requires some attention here, because\n``_pricing_service_symbol`` and ``_usage_type_symbol`` __are not__ the actual\nname of keys/properties - what you'll get here are the actual __symbols__, e.g.\n``my_ps1_symbol``, ``my_ps2_symbol``, ``my_ut1_symbol``, and so on. The reason\nbehind this is that ``Costs`` and ``SubCosts`` objects (see \"Model\" tab below),\nshould be implemented as arrays of objects, not objects keyed by their symbol\nnames.\n","operationId":"service-environment-costs_create","consumes":["application/json"],"summary":"Fetch daily costs for given service/environment aggregated over given time period"}},"/v0.10/usage-types/":{"get":{"operationId":"usage-types_list","summary":"Fetch all usage types","responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/UsageTypes"}}},"parameters":[{"required":false,"type":"number","description":"page number in case of paginated results","in":"query","name":"page"}],"tags":["v0.10"]}},"/v0.10/pricing-service-usages/{pricing_service_id}/{usages_date}/":{"get":{"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/UsageGet"}}},"parameters":[{"required":true,"type":"integer","description":"ID of pricing service obtained from Scrooge's admin","in":"path","name":"pricing_service_id"},{"required":true,"type":"string","description":"YYYY-MM-DD","in":"path","name":"usages_date"}],"tags":["v0.10"],"operationId":"pricingserviceusages_v10_read","summary":"Fetch previously uploaded usages for given pricing service and date","description":"This operation is provided for symmetry with POST (e.g. if you'd need to check if your usages are properly uploaded)."}},"/v0.10/team-time-division/{team_id}/{year}/{month}/":{"post":{"responses":{"201":{"description":"Created"}},"parameters":[{"$ref":"#/parameters/team_id"},{"$ref":"#/parameters/year"},{"$ref":"#/parameters/month"},{"required":true,"in":"body","name":"payload","schema":{"$ref":"#/definitions/Divisions"}}],"tags":["v0.10"],"operationId":"teamtimedivision_v10_create","summary":"Allocate team's working time to some services","consumes":["application/json"],"description":"Team Time Divisions allow to allocate your team's working time (and\ntherefore costs) into some services (e.g., projects that your team has\nbeen working on). The granularity of such allocations are per-month.\n\nThere are a couple of important things to keep in mind here:\n* services given as uid-111/prod and uid-111/test are two different\nentities, despite the fact that they both share the same UID;\n* percents from the same division should sum up exactly to 100% - if\nyou try to upload a division like 70+10+10 (or 70+10+10+20), you'll\nget a validation error.\n* when you upload two or more divisions for the same team and date\n(year+month), only the last one of them is taken into account (i.e.,\nit effectively overwrites previous ones);\n* your division requires at least one service_uid/environment/percent\nobject to be present (in such case, its ``percent`` field should equal\n100.0);\n* this endpoint is only accessible to team managers. A team manager in\nScrooge's is a person who is associated with a given team, and is\nallowed to allocate team resources (i.e. time) to services.\n"},"get":{"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Divisions"}}},"parameters":[{"$ref":"#/parameters/team_id"},{"$ref":"#/parameters/year"},{"$ref":"#/parameters/month"}],"tags":["v0.10"],"operationId":"teamtimedivision_v10_read","summary":"Fetch time divisions uploaded for given team and month","description":"This operation is provided for symmetry with POST (in case you'd need to\ncheck if Scrooge has correct divisions for your team - although you can\nlook at this data via Scrooge's GUI as well) and it has the same form as\nPOST minus ``payload`` part.\n\nPlease note that this endpoint is only accessible to team managers. A\nteam manager in Scrooge's is a person who is associated with a given\nteam, and is allowed to allocate team resources (i.e. time) to services.\n"}},"/v0.9/pricingserviceusages/{pricing_service_id}/{usages_date}/":{"get":{"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/UsageGet"}}},"parameters":[{"required":true,"type":"integer","description":"ID of pricing service obtained from Scrooge's admin","in":"path","name":"pricing_service_id"},{"required":true,"type":"string","description":"YYYY-MM-DD","in":"path","name":"usages_date"}],"tags":["v0.9"],"operationId":"pricingserviceusages_read","summary":"Fetch previously uploaded usages for given pricing service and date","description":"This operation is provided for symmetry with POST (e.g. if you'd need to check if your usages are properly uploaded)."}},"/v0.9/pricingserviceusages/":{"post":{"responses":{"201":{"description":"Created"}},"parameters":[{"required":true,"in":"body","description":"usages for given pricing service and date","name":"payload","schema":{"$ref":"#/definitions/Usage"}}],"tags":["v0.9"],"operationId":"pricingserviceusages_create","summary":"Upload usages for given pricing service and date","consumes":["application/json"],"description":"Since this endpoint is rather complex, it needs some additional\ncomments. The expected data structure looks as follows:\n```\n{\n    \"pricing_service\": \"<pricing service name or ID>\",\n    \"date\": \"<date>\",\n    [\"overwrite: \"no | values_only | delete_all_previous\"],\n    [\"ignore_unknown_services\": \"true | false\"],\n    \"usages\": [\n        {\n            \"pricing_object\": \"<pricing_object_name>\" |\n            (\n                (\"service\": \"<service name>\" | \"service_id\": <service ID (in Scrooge)> | \"service_uid\": \"<service UID>\"),\n                \"environment\": \"<environment name>\",\n            )\n            \"usages\": [\n                {\n                    \"symbol\": \"<usage type symbol>\",\n                    \"value\": <actual usage without units>,\n                    \"remarks\": <your remarks (this field is optional)>\n                },\n                ...\n            ]\n        },\n        ...\n    ]\n}\n```\nAs you can see, ``overwrite`` and ``ignore_unknown_services`` fields are\noptional - their default value are ``no`` and ``false`` respectively\n(see below for the description of all of their values).\n\nYou can provide here either service being charged (given either by its\nname, ID or UID), which will be charged directly, or the pricing object\n(e.g. hostname or IP address) - the service assigned to this pricing\nobject will be charged implicitly. In the former case (i.e., providing\nservice instead of pricing object), you need to specify the name of the\nenvironment as well. You can mix all those three forms in a single\nrequest, as shown in the example below, but the preferred form is by\nspecifying pricing object.\n\nPlease note that in case of uploading your data via pricing object\n(instead of service and environment, see expected data structure above),\nits service environment is implicitly given.\n\nYou could use field ``ignore_unknown_services`` to handle the case, when\nincoming data might be invalid, ex. some of provided service-environment\ndoes not exist. By default (or when this field is set to ``false``) this\nwill result in ``400`` error. When you set it to ``true``, all invalid\nrows will be ignored and their values will not be saved.\n\nThe aforementioned ``overwrite`` field defines a way how to treat\nprevious service usage values uploaded for the same date and usage\ntype. There are three possible actions here:\n\n* ``delete_all_previous`` - all previously uploaded daily usages for\nthe same date, with the same usage type should be deleted - only\nusages from the 2nd upload should remain, despite the fact that 1st\nupload contained daily usage for different service environment than\nthe 2nd one. Example:\n    * __1st upload__ (same day, same usage type):\n      daily usage 1: service env 1, value 40;\n      daily usage 2: service env 2, value 60\n    * __2nd upload__ (same day, same usage type):\n      daily usage 1: service env 1, value 50\n    * __final result__:\n      daily usage 1: service env 1, value 50\n\n* ``values_only`` - all previously uploaded daily usages from the same\ndate, with the same usage type __and the same service environment__\n(or pricing object - see remark at the bottom of this section)\nshould be replaced by the new daily usage - the ones with different\nservice environment should remain untouched. Example:\n    * __1st upload__ (same day, same usage type):\n      daily usage 1: service env 1, value 40\n      daily usage 2: service env 2, value 60\n    * __2nd upload__ (same day, same usage type):\n      daily usage 1: service env 1, value 50\n    * __final result__:\n      daily usage 1: service env 2, value 60\n      daily usage 2: service env 1, value 50\n\n* ``no`` - nothing gets deleted/replaced, new daily usages should be\nadded to the existing ones, despite the fact that it has the same\nservice environment as the one from the previous upload. Example:\n    * __1st upload__ (same day, same usage type):\n      daily usage 1: service env 1, value 40\n      daily usage 2: service env 2, value 60\n    * __2nd upload__ (same day, same usage type):\n      daily usage 1: service env 1, value 50\n    * __final result__:\n      daily usage 1: service env 1, value 40\n      daily usage 2: service env 2, value 60\n      daily usage 3: service env 1, value 50\n\nAnd finally, here's an example request illustrating some of the concepts\nmentioned in the comments above:\n```\n{\n    \"pricing_service\": \"pricing_service1\",\n    \"date\": \"2016-09-02\",\n    \"usages\": [\n        {\n            \"service\": \"service1\",\n            \"environment\": \"env1\",\n            \"usages\": [\n                {\n                    \"symbol\": \"requests\",\n                    \"value\": 123,\n                    \"remarks\": \"measured on my_host1.test\"\n                },\n                {\n                    \"symbol\": \"transfer\",\n                    \"value\": 321,\n                    \"remarks\": \"measured on my_host2.test\"\n                }\n            ]\n        },\n        {\n            \"pricing_object\": \"pricing_object1\",\n            \"usages\": [\n                {\n                    \"symbol\": \"requests\",\n                    \"value\": 543\n                },\n                {\n                    \"symbol\": \"transfer\",\n                    \"value\": 565\n                }\n            ]\n        },\n        {\n            \"service_id\": 123,\n            \"environment\": \"env2\",\n            \"usages\": [\n                {\n                    \"symbol\": \"requests\",\n                    \"value\": 788\n                },\n                {\n                    \"symbol\": \"transfer\",\n                    \"value\": 234\n                }\n            ]\n        },\n        {\n            \"service_uid\": \"sc-123\",\n            \"environment\": \"env2\",\n            \"usages\": [\n                {\n                    \"symbol\": \"requests\",\n                    \"value\": 788\n                },\n                {\n                    \"symbol\": \"transfer\",\n                    \"value\": 234\n                }\n            ]\n        }\n    ]\n}\n```\n"}},"/v0.10/api-token-auth/":{"post":{"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/ApiToken"}}},"parameters":[{"required":true,"in":"body","description":"your user's credentials","name":"payload","schema":{"$ref":"#/definitions/Credentials"}}],"tags":["v0.10"],"operationId":"api-token-auth_v10_create","summary":"Fetch your personal API key","consumes":["application/json"],"description":"Using Scrooge's API requires authorization. It is token-based, so each of your requests has to contain ``Authorization`` header in the following format: ``Authorization: Token your_api_key``. You can fetch your API key here, by POST-ing your credentials (assuming that you already have user account in Scrooge, i.e. you are able to log-in into its GUI)."}},"/v0.9/api-token-auth/":{"post":{"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/ApiToken"}}},"parameters":[{"required":true,"in":"body","description":"your user's credentials","name":"payload","schema":{"$ref":"#/definitions/Credentials"}}],"tags":["v0.9"],"operationId":"api-token-auth_create","summary":"Fetch your personal API key","consumes":["application/json"],"description":"Using Scrooge's API requires authorization. It is token-based, so each of your requests has to contain ``Authorization`` header in the following format: ``Authorization: Token your_api_key``. You can fetch your API key here, by POST-ing your credentials (assuming that you already have user account in Scrooge, i.e. you are able to log-in into its GUI)."}},"/v0.10/pricing-service-usages/":{"post":{"responses":{"201":{"description":"Created"}},"parameters":[{"required":true,"in":"body","description":"usages for given pricing service and date","name":"payload","schema":{"$ref":"#/definitions/Usage"}}],"tags":["v0.10"],"operationId":"pricingserviceusages_v10_create","summary":"Upload usages for given pricing service and date","consumes":["application/json"],"description":"Since this endpoint is rather complex, it needs some additional\ncomments. The expected data structure looks as follows:\n```\n{\n    \"pricing_service\": \"<pricing service name or ID>\",\n    \"date\": \"<date>\",\n    [\"overwrite: \"no | values_only | delete_all_previous\"],\n    [\"ignore_unknown_services\": \"true | false\"],\n    \"usages\": [\n        {\n            \"pricing_object\": \"<pricing_object_name>\" |\n            (\n                (\"service\": \"<service name>\" | \"service_id\": <service ID (in Scrooge)> | \"service_uid\": \"<service UID>\"),\n                \"environment\": \"<environment name>\",\n            )\n            \"usages\": [\n                {\n                    \"symbol\": \"<usage type symbol>\",\n                    \"value\": <actual usage without units>,\n                    \"remarks\": <your remarks (this field is optional)>\n                },\n                ...\n            ]\n        },\n        ...\n    ]\n}\n```\nAs you can see, ``overwrite`` and ``ignore_unknown_services`` fields are\noptional - their default value are ``no`` and ``false`` respectively\n(see below for the description of all of their values).\n\nYou can provide here either service being charged (given either by its\nname, ID or UID), which will be charged directly, or the pricing object\n(e.g. hostname or IP address) - the service assigned to this pricing\nobject will be charged implicitly. In the former case (i.e., providing\nservice instead of pricing object), you need to specify the name of the\nenvironment as well. You can mix all those three forms in a single\nrequest, as shown in the example below, but the preferred form is by\nspecifying pricing object.\n\nPlease note that in case of uploading your data via pricing object\n(instead of service and environment, see expected data structure above),\nits service environment is implicitly given.\n\nYou could use field ``ignore_unknown_services`` to handle the case, when\nincoming data might be invalid, ex. some of provided service-environment\ndoes not exist. By default (or when this field is set to ``false``) this\nwill result in ``400`` error. When you set it to ``true``, all invalid\nrows will be ignored and their values will not be saved.\n\nThe aforementioned ``overwrite`` field defines a way how to treat\nprevious service usage values uploaded for the same date and usage\ntype. There are three possible actions here:\n\n* ``delete_all_previous`` - all previously uploaded daily usages for\nthe same date, with the same usage type should be deleted - only\nusages from the 2nd upload should remain, despite the fact that 1st\nupload contained daily usage for different service environment than\nthe 2nd one. Example:\n    * __1st upload__ (same day, same usage type):\n      daily usage 1: service env 1, value 40;\n      daily usage 2: service env 2, value 60\n    * __2nd upload__ (same day, same usage type):\n      daily usage 1: service env 1, value 50\n    * __final result__:\n      daily usage 1: service env 1, value 50\n\n* ``values_only`` - all previously uploaded daily usages from the same\ndate, with the same usage type __and the same service environment__\n(or pricing object - see remark at the bottom of this section)\nshould be replaced by the new daily usage - the ones with different\nservice environment should remain untouched. Example:\n    * __1st upload__ (same day, same usage type):\n      daily usage 1: service env 1, value 40\n      daily usage 2: service env 2, value 60\n    * __2nd upload__ (same day, same usage type):\n      daily usage 1: service env 1, value 50\n    * __final result__:\n      daily usage 1: service env 2, value 60\n      daily usage 2: service env 1, value 50\n\n* ``no`` - nothing gets deleted/replaced, new daily usages should be\nadded to the existing ones, despite the fact that it has the same\nservice environment as the one from the previous upload. Example:\n    * __1st upload__ (same day, same usage type):\n      daily usage 1: service env 1, value 40\n      daily usage 2: service env 2, value 60\n    * __2nd upload__ (same day, same usage type):\n      daily usage 1: service env 1, value 50\n    * __final result__:\n      daily usage 1: service env 1, value 40\n      daily usage 2: service env 2, value 60\n      daily usage 3: service env 1, value 50\n\nAnd finally, here's an example request illustrating some of the concepts\nmentioned in the comments above:\n```\n{\n    \"pricing_service\": \"pricing_service1\",\n    \"date\": \"2016-09-02\",\n    \"usages\": [\n        {\n            \"service\": \"service1\",\n            \"environment\": \"env1\",\n            \"usages\": [\n                {\n                    \"symbol\": \"requests\",\n                    \"value\": 123,\n                    \"remarks\": \"measured on my_host1.test\"\n                },\n                {\n                    \"symbol\": \"transfer\",\n                    \"value\": 321,\n                    \"remarks\": \"measured on my_host2.test\"\n                }\n            ]\n        },\n        {\n            \"pricing_object\": \"pricing_object1\",\n            \"usages\": [\n                {\n                    \"symbol\": \"requests\",\n                    \"value\": 543\n                },\n                {\n                    \"symbol\": \"transfer\",\n                    \"value\": 565\n                }\n            ]\n        },\n        {\n            \"service_id\": 123,\n            \"environment\": \"env2\",\n            \"usages\": [\n                {\n                    \"symbol\": \"requests\",\n                    \"value\": 788\n                },\n                {\n                    \"symbol\": \"transfer\",\n                    \"value\": 234\n                }\n            ]\n        },\n        {\n            \"service_uid\": \"sc-123\",\n            \"environment\": \"env2\",\n            \"usages\": [\n                {\n                    \"symbol\": \"requests\",\n                    \"value\": 788\n                },\n                {\n                    \"symbol\": \"transfer\",\n                    \"value\": 234\n                }\n            ]\n        }\n    ]\n}\n```\n"}},"/v0.10/usage-types/{symbol}/":{"get":{"operationId":"usage-types_read","summary":"Fetch usage type given by 'symbol'","responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/UsageType"}}},"parameters":[{"required":true,"type":"string","description":"symbol of usage type","in":"path","name":"symbol"}],"tags":["v0.10"]}}},"schemes":["http","https"],"parameters":{"team_id":{"required":true,"type":"integer","description":"ID of your team taken from Scrooge's admin","in":"path","name":"team_id"},"year":{"required":true,"type":"integer","description":"e.g. 2016","in":"path","name":"year"},"month":{"required":true,"type":"integer","description":"e.g. 12","in":"path","name":"month"}},"basePath":"/scrooge/api","securityDefinitions":{"Token":{"in":"header","type":"apiKey","description":"should be given as e.g. \"Token 84e0f8b9dbb3f23b25b52a1b6f4668170064a049\"","name":"Authorization"}},"host":"","definitions":{"Divisions":{"type":"object","properties":{"division":{"items":{"$ref":"#/definitions/Division"},"type":"array"}}},"UsageGet":{"type":"object","properties":{"pricing_service_id":{"type":"number"},"date":{"type":"string","description":"YYYY-MM-DD"},"usages":{"items":{"$ref":"#/definitions/SubUsageGet"},"type":"array"},"pricing_service":{"type":"string","description":"pricing service name"}}},"ServiceEnvironmentCosts":{"type":"object","properties":{"service_environment_costs":{"items":{"$ref":"#/definitions/ServiceEnvironmentCost"},"type":"array"}}},"SubCost":{"type":"object","properties":{"usage_value":{"type":"number"},"cost":{"type":"number"}}},"UsagePrice":{"type":"object","properties":{"start":{"type":"string","description":"date (YYYY-MM-DD) from which price takes effect"},"price":{"type":"number"},"forecast_price":{"type":"number"},"end":{"type":"string","description":"date (YYYY-MM-DD) to which price takes effect"}}},"UsageType":{"type":"object","properties":{"url":{"type":"string","description":"points to the individual usage type"},"symbol":{"type":"string"},"usage_price":{"items":{"$ref":"#/definitions/UsagePrice"},"type":"array"},"id":{"type":"number","description":"usage type ID taken from Scrooge's admin"},"name":{"type":"string"}}},"ApiToken":{"type":"object","properties":{"token":{"type":"string"}}},"Costs":{"type":"object","properties":{"_pricing_service_symbol":{"description":"can be many of them - there will be actual symbols here, not \"_pricing_service_symbol\"\n","$ref":"#/definitions/Cost"}}},"SubSubUsage":{"required":["symbol","value"],"type":"object","properties":{"remarks":{"type":"string"},"symbol":{"type":"string"},"value":{"type":"string"}}},"Usage":{"required":["pricing_service","date","usages"],"type":"object","properties":{"date":{"type":"string"},"usages":{"items":{"$ref":"#/definitions/SubUsage"},"type":"array"},"pricing_service":{"type":"string"},"overwrite":{"enum":[false,"values_only","delete_all_previous"],"type":"string"},"ignore_unknown_services":{"type":"boolean"}}},"ServiceEnvironmentCost":{"type":"object","properties":{"total_cost":{"type":"number"},"costs":{"$ref":"#/definitions/Costs"},"grouped_date":{"type":"string","description":"YYYY-MM-DD or YYYY-MM"}}},"SubUsageGet":{"type":"object","properties":{"environment":{"type":"string"},"service_uid":{"type":"string"},"usages":{"items":{"$ref":"#/definitions/SubSubUsage"},"type":"array"},"service":{"type":"string"},"service_id":{"type":"number"},"pricing_object":{"type":"string"}}},"Division":{"required":["service_uid","environment","percent"],"type":"object","properties":{"environment":{"type":"string"},"service_uid":{"type":"string"},"percent":{"type":"number"}}},"Cost":{"type":"object","properties":{"usage_value":{"type":"number"},"subcosts":{"$ref":"#/definitions/SubCosts"},"cost":{"type":"number"}}},"UsageTypes":{"items":{"$ref":"#/definitions/UsageType"},"type":"array"},"SubUsage":{"required":["usages"],"type":"object","properties":{"environment":{"type":"string"},"service_uid":{"type":"string"},"usages":{"items":{"$ref":"#/definitions/SubSubUsage"},"type":"array"},"service":{"type":"string"},"service_id":{"type":"string"},"pricing_object":{"type":"string"}}},"SubCosts":{"type":"object","properties":{"_usage_type_symbol":{"description":"can be many of them - there will be actual symbols here, not \"_usage_type_symbol\"\n","$ref":"#/definitions/SubCost"}}},"Credentials":{"required":["username","password"],"type":"object","properties":{"username":{"type":"string"},"password":{"type":"string"}}}},"swagger":"2.0"}