# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2016-11-17 11:41
from __future__ import unicode_literals

import ipaddress
from datetime import datetime

from django.db import migrations
from django.db.models import Count
from ralph_scrooge.models.pricing_object import PRICING_OBJECT_TYPES


def udpdate_ip_address_number(apps, schema_editor):
    PricingObject = apps.get_model('ralph_scrooge', 'PricingObject')
    IPInfo = apps.get_model('ralph_scrooge', 'IPInfo')
    DailyUsage = apps.get_model('ralph_scrooge', 'DailyUsage')
    DailyCost = apps.get_model('ralph_scrooge', 'DailyCost')
    today = datetime.now().date()

    # Find duplicates
    duplicates = PricingObject.objects.filter(
        type=PRICING_OBJECT_TYPES.IP_ADDRESS
    ).values(
        'name'
    ).annotate(Count('name')).order_by().filter(
        name__count__gt=1,
    )

    for d in duplicates:
        print('Processing IP: {}'.format(d['name']))
        pricing_objects = PricingObject.objects.filter(
            name=d['name'], type=PRICING_OBJECT_TYPES.IP_ADDRESS
        ).order_by('created')
        # Default PO for the oldest entry
        default_pricing_object = pricing_objects[0]
        for po in pricing_objects[1:]:
            DailyCost.objects.filter(pricing_object=po).update(
                pricing_object=default_pricing_object
            )
            dpo = default_pricing_object.daily_pricing_objects.get_or_create(
                date=today,
                defaults=dict(
                    service_environment=default_pricing_object.service_environment,
                    pricing_object=default_pricing_object,
                )
            )[0]

            DailyUsage.objects.filter(
                daily_pricing_object__pricing_object=po
            ).update(daily_pricing_object=dpo)
            print('Delete {} pricing object'.format(po.name))
            po.delete()

    for pricing_object in PricingObject.objects.filter(
        type=PRICING_OBJECT_TYPES.IP_ADDRESS
    ):
        ip_info = IPInfo(pricingobject_ptr=pricing_object)
        ip_info.__dict__.update(pricing_object.__dict__)
        ip_info.number = int(ipaddress.ip_address(ip_info.name))
        ip_info.save()


class Migration(migrations.Migration):

    dependencies = [
        ('ralph_scrooge', '0005_ipinfo'),
    ]

    operations = [
        migrations.RunPython(
            udpdate_ip_address_number,
            reverse_code=migrations.RunPython.noop
        )
    ]
