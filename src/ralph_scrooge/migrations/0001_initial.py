# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2016-10-27 11:25
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import ralph_scrooge.models._history


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ScroogeUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BaseUsage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=75, unique=True, verbose_name='name')),
                ('active', models.BooleanField(default=True, help_text="If inactive, this type won't take part in costs calculation", verbose_name='active')),
                ('symbol', models.CharField(blank=True, default='', max_length=255, verbose_name='symbol')),
                ('type', models.PositiveIntegerField(choices=[(1, 'Usage Type'), (2, 'Team'), (3, 'Extra Cost'), (4, 'Pricing Service'), (5, 'Dynamic extra cost')], editable=False, verbose_name='type')),
                ('divide_by', models.IntegerField(default=0, help_text='Divide value by 10 to the power of entered value. Ex. with divide by = 3 and value = 1 000 000, presented value is 1 000.', verbose_name='Divide by')),
                ('rounding', models.IntegerField(default=0, help_text='Decimal places', verbose_name='Value rounding')),
            ],
            managers=[
                ('objects_admin', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='BusinessLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=75, verbose_name='name')),
                ('ci_id', models.IntegerField(blank=True, null=True, unique=True, verbose_name='id from cmdb')),
                ('ralph3_id', models.IntegerField(blank=True, null=True, unique=True, verbose_name='id from Ralph 3')),
                ('ci_uid', models.CharField(blank=True, max_length=100, null=True, verbose_name='uid from cmdb')),
            ],
        ),
        migrations.CreateModel(
            name='CostDateStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True, verbose_name='date')),
                ('calculated', models.BooleanField(default=False, editable=False, verbose_name='calculated')),
                ('forecast_calculated', models.BooleanField(default=False, editable=False, verbose_name='forecast calculated')),
                ('accepted', models.BooleanField(default=False, editable=False, verbose_name='accepted')),
                ('forecast_accepted', models.BooleanField(default=False, editable=False, verbose_name='forecast accepted')),
            ],
            options={
                'verbose_name': 'cost date status',
                'verbose_name_plural': 'costs date status',
            },
        ),
        migrations.CreateModel(
            name='DailyCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=255)),
                ('depth', models.PositiveIntegerField(default=0)),
                ('value', models.FloatField(default=0, verbose_name='value')),
                ('cost', models.DecimalField(decimal_places=6, default=0, max_digits=16, verbose_name='cost')),
                ('forecast', models.BooleanField(default=False, verbose_name='forecast')),
                ('date', models.DateField(verbose_name='date')),
            ],
            options={
                'verbose_name': 'daily cost',
                'verbose_name_plural': 'daily costs',
            },
        ),
        migrations.CreateModel(
            name='DailyPricingObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='date')),
            ],
        ),
        migrations.CreateModel(
            name='DailyUsage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('value', models.FloatField(default=0, verbose_name='value')),
                ('remarks', models.TextField(blank=True, default='', help_text='Additional information.', verbose_name='Remarks')),
            ],
            options={
                'verbose_name': 'daily usage',
                'verbose_name_plural': 'daily usages',
            },
        ),
        migrations.CreateModel(
            name='DynamicExtraCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.DecimalField(decimal_places=6, max_digits=16, verbose_name='cost')),
                ('forecast_cost', models.DecimalField(decimal_places=6, default=0.0, max_digits=16, verbose_name='forecast cost')),
                ('start', models.DateField(blank=True, default=None, null=True, verbose_name='start time')),
                ('end', models.DateField(blank=True, default=None, null=True, verbose_name='end time')),
            ],
            options={
                'verbose_name': 'Dynamic extra cost',
                'verbose_name_plural': 'Dynamic extra costs',
            },
        ),
        migrations.CreateModel(
            name='DynamicExtraCostDivision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percent', models.FloatField(default=100, validators=[django.core.validators.MaxValueValidator(100.0), django.core.validators.MinValueValidator(0.0)], verbose_name='percent')),
            ],
            options={
                'verbose_name': 'Dynamic extra cost division',
                'verbose_name_plural': 'Dynamic extra cost divisions',
            },
        ),
        migrations.CreateModel(
            name='Environment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=75, verbose_name='name')),
                ('ci_id', models.IntegerField(blank=True, null=True, unique=True, verbose_name='id from cmdb')),
                ('ralph3_id', models.IntegerField(blank=True, null=True, unique=True, verbose_name='id from Ralph 3')),
                ('ci_uid', models.CharField(blank=True, max_length=100, null=True, verbose_name='uid from cmdb')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ExtraCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.DecimalField(decimal_places=6, max_digits=16, verbose_name='cost')),
                ('forecast_cost', models.DecimalField(decimal_places=6, default=0.0, max_digits=16, verbose_name='forecast cost')),
                ('start', models.DateField(blank=True, default=None, null=True, verbose_name='start time')),
                ('end', models.DateField(blank=True, default=None, null=True, verbose_name='end time')),
                ('remarks', models.TextField(blank=True, default='', help_text='Additional information.', verbose_name='Remarks')),
            ],
            options={
                'verbose_name': 'Extra cost',
                'verbose_name_plural': 'Extra costs',
            },
        ),
        migrations.CreateModel(
            name='HistoricalService',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date created')),
                ('modified', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last modified')),
                ('cache_version', models.PositiveIntegerField(default=0, editable=False, verbose_name='cache version')),
                ('ci_id', models.IntegerField(blank=True, db_index=True, null=True, verbose_name='id from cmdb')),
                ('ralph3_id', models.IntegerField(blank=True, db_index=True, null=True, verbose_name='id from Ralph 3')),
                ('ci_uid', models.CharField(blank=True, max_length=100, null=True, verbose_name='uid from cmdb')),
                ('name', models.CharField(max_length=256, verbose_name='name')),
                ('symbol', models.CharField(blank=True, max_length=256, null=True, verbose_name='symbol')),
                ('manually_allocate_costs', models.BooleanField(default=False, verbose_name='Manually Allocate Costs')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('active_from', models.DateTimeField(default=django.utils.timezone.now)),
                ('active_to', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999))),
                ('created_by', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='modified by')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'history',
            },
        ),
        migrations.CreateModel(
            name='PricingObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date created')),
                ('modified', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last modified')),
                ('cache_version', models.PositiveIntegerField(default=0, editable=False, verbose_name='cache version')),
                ('name', models.CharField(blank=True, default=None, max_length=200, null=True, verbose_name='name')),
                ('remarks', models.TextField(blank=True, default='', help_text='Additional information.', verbose_name='Remarks')),
            ],
        ),
        migrations.CreateModel(
            name='PricingObjectModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_id', models.IntegerField(blank=True, null=True, verbose_name='model id')),
                ('ralph3_model_id', models.IntegerField(blank=True, null=True, verbose_name='model id (Ralph 3)')),
                ('name', models.CharField(max_length=100, verbose_name='model name')),
                ('manufacturer', models.CharField(blank=True, max_length=100, null=True, verbose_name='manufacturer')),
                ('category', models.CharField(blank=True, max_length=100, null=True, verbose_name='category')),
            ],
            options={
                'ordering': ['manufacturer', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PricingObjectType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='name')),
                ('color', models.CharField(blank=True, max_length=30, null=True, unique=True, verbose_name='color')),
                ('icon_class', models.CharField(default='fa-tasks', help_text='Please visit http://fortawesome.github.io/Font-Awesome/icons/ for more information.', max_length=30, verbose_name='icon class')),
            ],
        ),
        migrations.CreateModel(
            name='ProfitCenter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=75, verbose_name='name')),
                ('ci_id', models.IntegerField(blank=True, null=True, unique=True, verbose_name='id from cmdb')),
                ('ralph3_id', models.IntegerField(blank=True, null=True, unique=True, verbose_name='id from Ralph 3')),
                ('ci_uid', models.CharField(blank=True, max_length=100, null=True, verbose_name='uid from cmdb')),
                ('description', models.TextField(default=None, null=True)),
                ('business_line', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='profit_centers', to='ralph_scrooge.BusinessLine', verbose_name='business line')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date created')),
                ('modified', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last modified')),
                ('cache_version', models.PositiveIntegerField(default=0, editable=False, verbose_name='cache version')),
                ('ci_id', models.IntegerField(blank=True, null=True, unique=True, verbose_name='id from cmdb')),
                ('ralph3_id', models.IntegerField(blank=True, null=True, unique=True, verbose_name='id from Ralph 3')),
                ('ci_uid', models.CharField(blank=True, max_length=100, null=True, verbose_name='uid from cmdb')),
                ('name', models.CharField(max_length=256, verbose_name='name')),
                ('symbol', models.CharField(blank=True, max_length=256, null=True, verbose_name='symbol')),
                ('manually_allocate_costs', models.BooleanField(default=False, verbose_name='Manually Allocate Costs')),
                ('created_by', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(ralph_scrooge.models._history.ModelDiffMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ServiceEnvironment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('environment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services_environments', to='ralph_scrooge.Environment', verbose_name='environment')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='environments_services', to='ralph_scrooge.Service', verbose_name='service')),
            ],
            options={
                'ordering': ['service__name', 'environment__name'],
                'verbose_name': 'service environment',
                'verbose_name_plural': 'service environments',
            },
            managers=[
                ('objects_rel', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ServiceOwnership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.PositiveIntegerField(choices=[(1, 'Technical owner'), (2, 'Business owner')], default=1, verbose_name='Type')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='owner')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ralph_scrooge.Service', verbose_name='service')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceUsageTypes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateField(default=datetime.date(1, 1, 1), verbose_name='start')),
                ('end', models.DateField(default=datetime.date(9999, 12, 31), verbose_name='end')),
                ('percent', models.FloatField(default=100, validators=[django.core.validators.MaxValueValidator(100.0), django.core.validators.MinValueValidator(0.0)], verbose_name='percent')),
            ],
            options={
                'verbose_name': 'service usage type',
                'verbose_name_plural': 'service usage types',
            },
        ),
        migrations.CreateModel(
            name='Statement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateField()),
                ('end', models.DateField()),
                ('header', models.TextField(verbose_name='Report header')),
                ('data', models.TextField(verbose_name='Report data')),
                ('forecast', models.BooleanField(default=0, verbose_name='Forecast price')),
                ('is_active', models.BooleanField(default=False, verbose_name='Show only active')),
            ],
            options={
                'verbose_name': 'Statement',
                'verbose_name_plural': 'Statement',
            },
        ),
        migrations.CreateModel(
            name='SupportCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.DecimalField(decimal_places=6, max_digits=16, verbose_name='cost')),
                ('forecast_cost', models.DecimalField(decimal_places=6, default=0.0, max_digits=16, verbose_name='forecast cost')),
                ('start', models.DateField(blank=True, default=None, null=True, verbose_name='start time')),
                ('end', models.DateField(blank=True, default=None, null=True, verbose_name='end time')),
                ('remarks', models.TextField(blank=True, default='', help_text='Additional information.', verbose_name='Remarks')),
                ('support_id', models.IntegerField(verbose_name='support id')),
            ],
            options={
                'verbose_name': 'Support cost',
                'verbose_name_plural': 'Support costs',
            },
        ),
        migrations.CreateModel(
            name='SyncStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date created')),
                ('modified', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last modified')),
                ('cache_version', models.PositiveIntegerField(default=0, editable=False, verbose_name='cache version')),
                ('date', models.DateField()),
                ('plugin', models.CharField(max_length=100, verbose_name='plugin name')),
                ('success', models.BooleanField(default=False, verbose_name='status')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='remarks')),
            ],
            options={
                'verbose_name': 'sync status',
                'verbose_name_plural': 'sync statuses',
            },
        ),
        migrations.CreateModel(
            name='TeamCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('members_count', models.IntegerField(blank=True, default=0, null=True, verbose_name='members count')),
                ('cost', models.DecimalField(decimal_places=6, default=0.0, max_digits=16, verbose_name='cost')),
                ('forecast_cost', models.DecimalField(decimal_places=6, default=0.0, max_digits=16, verbose_name='forecast cost')),
                ('start', models.DateField(verbose_name='start')),
                ('end', models.DateField(verbose_name='end')),
            ],
            options={
                'verbose_name': 'Team cost',
                'verbose_name_plural': 'Teams costs',
            },
        ),
        migrations.CreateModel(
            name='TeamManager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manager', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='manager')),
            ],
        ),
        migrations.CreateModel(
            name='TeamServiceEnvironmentPercent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percent', models.FloatField(validators=[django.core.validators.MaxValueValidator(100.0), django.core.validators.MinValueValidator(0.0)], verbose_name='percent')),
                ('service_environment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ralph_scrooge.ServiceEnvironment', verbose_name='service environment')),
                ('team_cost', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='percentage', to='ralph_scrooge.TeamCost', verbose_name='team cost')),
            ],
            options={
                'verbose_name': 'Team service environment percent',
                'verbose_name_plural': 'Teams services environments percent',
            },
        ),
        migrations.CreateModel(
            name='UsagePrice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=6, default=0, max_digits=16, verbose_name='price')),
                ('forecast_price', models.DecimalField(decimal_places=6, default=0, max_digits=16, verbose_name='forecast price')),
                ('cost', models.DecimalField(decimal_places=6, default=0.0, max_digits=16, verbose_name='cost')),
                ('forecast_cost', models.DecimalField(decimal_places=6, default=0.0, max_digits=16, verbose_name='forecast cost')),
                ('start', models.DateField()),
                ('end', models.DateField()),
            ],
            options={
                'ordering': ('type', '-start'),
                'verbose_name': 'usage price',
                'verbose_name_plural': 'usage prices',
            },
        ),
        migrations.CreateModel(
            name='Warehouse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=75, unique=True, verbose_name='name')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date created')),
                ('modified', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last modified')),
                ('cache_version', models.PositiveIntegerField(default=0, editable=False, verbose_name='cache version')),
                ('show_in_report', models.BooleanField(default=False, verbose_name='Show warehouse in report')),
                ('id_from_assets', models.IntegerField(blank=True, null=True, unique=True, verbose_name='Warehouse id from assets')),
                ('ralph3_id', models.IntegerField(blank=True, null=True, unique=True, verbose_name='Warehouse id from assets (Ralph 3)')),
                ('created_by', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('modified_by', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='modified by')),
            ],
        ),
        migrations.CreateModel(
            name='AssetInfo',
            fields=[
                ('pricingobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ralph_scrooge.PricingObject')),
                ('sn', models.CharField(blank=True, max_length=200, null=True, unique=True, verbose_name='serial number')),
                ('barcode', models.CharField(blank=True, max_length=200, null=True, unique=True, verbose_name='barcode')),
                ('device_id', models.IntegerField(blank=True, default=None, null=True, unique=True, verbose_name='device id')),
                ('asset_id', models.IntegerField(blank=True, null=True, unique=True, verbose_name='asset id')),
                ('ralph3_asset_id', models.IntegerField(blank=True, null=True, unique=True, verbose_name='asset id (Ralph 3)')),
                ('warehouse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ralph_scrooge.Warehouse', verbose_name='warehouse')),
            ],
            bases=('ralph_scrooge.pricingobject',),
        ),
        migrations.CreateModel(
            name='DailyAssetInfo',
            fields=[
                ('dailypricingobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ralph_scrooge.DailyPricingObject')),
                ('depreciation_rate', models.DecimalField(decimal_places=6, default=0, max_digits=16, verbose_name='Depreciation rate')),
                ('is_depreciated', models.BooleanField(default=False, verbose_name='Is depreciated')),
                ('price', models.DecimalField(decimal_places=6, default=0, max_digits=16, verbose_name='price')),
                ('daily_cost', models.DecimalField(decimal_places=6, default=0, max_digits=16, verbose_name='daily cost')),
                ('asset_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ralph_scrooge.AssetInfo', verbose_name='asset details')),
            ],
            options={
                'verbose_name': 'Daily Asset info',
                'verbose_name_plural': 'Daily Assets info',
            },
            bases=('ralph_scrooge.dailypricingobject',),
        ),
        migrations.CreateModel(
            name='DailyDatabaseInfo',
            fields=[
                ('dailypricingobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ralph_scrooge.DailyPricingObject')),
            ],
            bases=('ralph_scrooge.dailypricingobject',),
        ),
        migrations.CreateModel(
            name='DailyTenantInfo',
            fields=[
                ('dailypricingobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ralph_scrooge.DailyPricingObject')),
                ('enabled', models.BooleanField(default=False, verbose_name='enabled')),
            ],
            bases=('ralph_scrooge.dailypricingobject',),
        ),
        migrations.CreateModel(
            name='DailyVIPInfo',
            fields=[
                ('dailypricingobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ralph_scrooge.DailyPricingObject')),
            ],
            bases=('ralph_scrooge.dailypricingobject',),
        ),
        migrations.CreateModel(
            name='DailyVirtualInfo',
            fields=[
                ('dailypricingobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ralph_scrooge.DailyPricingObject')),
                ('hypervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='daily_virtuals', to='ralph_scrooge.DailyAssetInfo', verbose_name='hypervisor')),
            ],
            bases=('ralph_scrooge.dailypricingobject',),
        ),
        migrations.CreateModel(
            name='DatabaseInfo',
            fields=[
                ('pricingobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ralph_scrooge.PricingObject')),
                ('database_id', models.IntegerField(unique=True, verbose_name='Ralph database ID')),
                ('parent_device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='databases', to='ralph_scrooge.AssetInfo', verbose_name='parent device')),
            ],
            bases=('ralph_scrooge.pricingobject',),
        ),
        migrations.CreateModel(
            name='DynamicExtraCostType',
            fields=[
                ('baseusage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ralph_scrooge.BaseUsage')),
            ],
            options={
                'verbose_name': 'Dynamic extra cost',
                'verbose_name_plural': 'Dynamic extra costs',
            },
            bases=('ralph_scrooge.baseusage',),
            managers=[
                ('objects_admin', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ExtraCostType',
            fields=[
                ('baseusage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ralph_scrooge.BaseUsage')),
            ],
            options={
                'verbose_name': 'extra cost type',
                'verbose_name_plural': 'extra cost types',
            },
            bases=('ralph_scrooge.baseusage',),
            managers=[
                ('objects_admin', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='PricingService',
            fields=[
                ('baseusage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ralph_scrooge.BaseUsage')),
                ('plugin_type', models.PositiveIntegerField(choices=[(1, 'universal'), (2, 'fixed price')], default=1, verbose_name='plugin type')),
                ('charge_diff_to_real_costs', models.ForeignKey(blank=True, help_text='if plugin type different than universal, select pricing service to charge by difference between costs calculated by plugin and real costs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='charged_by_diffs', to='ralph_scrooge.PricingService', verbose_name='charge diff to real costs')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'pricing service',
                'verbose_name_plural': 'pricing services',
            },
            bases=('ralph_scrooge.baseusage',),
            managers=[
                ('objects_admin', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('baseusage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ralph_scrooge.BaseUsage')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date created')),
                ('modified', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last modified')),
                ('cache_version', models.PositiveIntegerField(default=0, editable=False, verbose_name='cache version')),
                ('show_percent_column', models.BooleanField(default=False, verbose_name='Show percent column in report')),
                ('billing_type', models.PositiveIntegerField(choices=[(1, 'By time'), (2, 'By assets and cores count'), (3, 'By assets count'), (4, 'Distribute cost to other teams proportionally to members count'), (5, 'Average')], default=1, verbose_name='Billing type')),
                ('created_by', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
            ],
            options={
                'verbose_name': 'Team',
                'verbose_name_plural': 'Teams',
            },
            bases=('ralph_scrooge.baseusage', models.Model),
            managers=[
                ('objects_admin', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TenantInfo',
            fields=[
                ('pricingobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ralph_scrooge.PricingObject')),
                ('tenant_id', models.CharField(blank=True, db_index=True, max_length=100, null=True, unique=True, verbose_name='OpenStack Tenant ID')),
                ('ralph3_tenant_id', models.CharField(blank=True, db_index=True, max_length=100, null=True, unique=True, verbose_name='OpenStack Tenant ID (Ralph 3)')),
                ('device_id', models.IntegerField(blank=True, null=True, verbose_name='device id')),
            ],
            bases=('ralph_scrooge.pricingobject',),
        ),
        migrations.CreateModel(
            name='UsageType',
            fields=[
                ('baseusage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ralph_scrooge.BaseUsage')),
                ('average', models.BooleanField(default=False, verbose_name='Average the values over multiple days')),
                ('show_value_percentage', models.BooleanField(default=False, verbose_name='Show percentage of value')),
                ('by_warehouse', models.BooleanField(default=False, verbose_name='Usage type is by warehouse')),
                ('is_manually_type', models.BooleanField(default=False, verbose_name='Cost or price for usage is entered manually')),
                ('by_cost', models.BooleanField(default=False, verbose_name='Given value is a cost')),
                ('order', models.IntegerField(default=0, verbose_name='Display order')),
                ('usage_type', models.CharField(choices=[('BU', 'Base usage type'), ('RU', 'Regular usage type'), ('SU', 'Service usage type')], default='SU', max_length=2, verbose_name='Type')),
            ],
            options={
                'verbose_name': 'usage type',
                'verbose_name_plural': 'usage types',
            },
            bases=('ralph_scrooge.baseusage',),
            managers=[
                ('objects_admin', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='VIPInfo',
            fields=[
                ('pricingobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ralph_scrooge.PricingObject')),
                ('vip_id', models.IntegerField(null=True, unique=True, verbose_name='Ralph VIP ID')),
                ('external_id', models.IntegerField(null=True, unique=True, verbose_name='VIP ID from external system')),
                ('port', models.PositiveIntegerField(verbose_name='port')),
            ],
            bases=('ralph_scrooge.pricingobject',),
        ),
        migrations.CreateModel(
            name='VirtualInfo',
            fields=[
                ('pricingobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ralph_scrooge.PricingObject')),
                ('device_id', models.IntegerField(null=True, unique=True, verbose_name='Ralph device ID')),
                ('ralph3_id', models.IntegerField(blank=True, null=True, unique=True)),
            ],
            bases=('ralph_scrooge.pricingobject',),
        ),
        migrations.AddField(
            model_name='usageprice',
            name='warehouse',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='ralph_scrooge.Warehouse', verbose_name='warehouse'),
        ),
        migrations.AlterUniqueTogether(
            name='syncstatus',
            unique_together=set([('date', 'plugin')]),
        ),
        migrations.AddField(
            model_name='supportcost',
            name='pricing_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ralph_scrooge.PricingObject', verbose_name='pricing object'),
        ),
        migrations.AlterUniqueTogether(
            name='statement',
            unique_together=set([('start', 'end', 'forecast', 'is_active')]),
        ),
        migrations.AddField(
            model_name='service',
            name='environments',
            field=models.ManyToManyField(related_name='services', related_query_name='services', through='ralph_scrooge.ServiceEnvironment', to='ralph_scrooge.Environment', verbose_name='environments'),
        ),
        migrations.AddField(
            model_name='service',
            name='modified_by',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='modified by'),
        ),
        migrations.AddField(
            model_name='service',
            name='ownership',
            field=models.ManyToManyField(related_name='services', related_query_name='services', through='ralph_scrooge.ServiceOwnership', to=settings.AUTH_USER_MODEL, verbose_name='ownership'),
        ),
        migrations.AddField(
            model_name='service',
            name='profit_center',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='services', related_query_name='services', to='ralph_scrooge.ProfitCenter', verbose_name='profit center'),
        ),
        migrations.AddField(
            model_name='pricingobjectmodel',
            name='type',
            field=models.ForeignKey(default=255, on_delete=django.db.models.deletion.CASCADE, related_name='pricing_object_models', to='ralph_scrooge.PricingObjectType', verbose_name='type'),
        ),
        migrations.AddField(
            model_name='pricingobject',
            name='created_by',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by'),
        ),
        migrations.AddField(
            model_name='pricingobject',
            name='model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pricing_objects', to='ralph_scrooge.PricingObjectModel', verbose_name='model'),
        ),
        migrations.AddField(
            model_name='pricingobject',
            name='modified_by',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='modified by'),
        ),
        migrations.AddField(
            model_name='pricingobject',
            name='service_environment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pricing_objects', to='ralph_scrooge.ServiceEnvironment', verbose_name='service environment'),
        ),
        migrations.AddField(
            model_name='pricingobject',
            name='type',
            field=models.ForeignKey(default=255, on_delete=django.db.models.deletion.CASCADE, related_name='pricing_objects', to='ralph_scrooge.PricingObjectType', verbose_name='type'),
        ),
        migrations.AddField(
            model_name='historicalservice',
            name='profit_center',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='ralph_scrooge.ProfitCenter', verbose_name='profit center'),
        ),
        migrations.AddField(
            model_name='extracost',
            name='service_environment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='extra_costs', to='ralph_scrooge.ServiceEnvironment', verbose_name='service environment'),
        ),
        migrations.AddField(
            model_name='dailyusage',
            name='daily_pricing_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ralph_scrooge.DailyPricingObject', verbose_name='Pricing Object'),
        ),
        migrations.AddField(
            model_name='dailyusage',
            name='service_environment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_usages', to='ralph_scrooge.ServiceEnvironment', verbose_name='service environment'),
        ),
        migrations.AddField(
            model_name='dailyusage',
            name='warehouse',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='ralph_scrooge.Warehouse', verbose_name='warehouse'),
        ),
        migrations.AddField(
            model_name='dailypricingobject',
            name='pricing_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_pricing_objects', to='ralph_scrooge.PricingObject', verbose_name='pricing object'),
        ),
        migrations.AddField(
            model_name='dailypricingobject',
            name='service_environment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_pricing_objects', to='ralph_scrooge.ServiceEnvironment', verbose_name='service environment'),
        ),
        migrations.AddField(
            model_name='dailycost',
            name='pricing_object',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='daily_costs', to='ralph_scrooge.PricingObject', verbose_name='pricing object'),
        ),
        migrations.AddField(
            model_name='dailycost',
            name='service_environment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_costs', to='ralph_scrooge.ServiceEnvironment', verbose_name='service environment'),
        ),
        migrations.AddField(
            model_name='dailycost',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_costs', to='ralph_scrooge.BaseUsage', verbose_name='type'),
        ),
        migrations.AddField(
            model_name='dailycost',
            name='warehouse',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='daily_costs', to='ralph_scrooge.Warehouse', verbose_name='warehouse'),
        ),
        migrations.AddField(
            model_name='vipinfo',
            name='ip_info',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vip', to='ralph_scrooge.PricingObject', verbose_name='ip address'),
        ),
        migrations.AddField(
            model_name='vipinfo',
            name='load_balancer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vips', to='ralph_scrooge.PricingObject', verbose_name='load balancer'),
        ),
        migrations.AddField(
            model_name='usagetype',
            name='excluded_services',
            field=models.ManyToManyField(blank=True, related_name='excluded_usage_types', to='ralph_scrooge.Service', verbose_name='Excluded services'),
        ),
        migrations.AddField(
            model_name='usageprice',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ralph_scrooge.UsageType', verbose_name='type'),
        ),
        migrations.AlterUniqueTogether(
            name='teamserviceenvironmentpercent',
            unique_together=set([('team_cost', 'service_environment')]),
        ),
        migrations.AddField(
            model_name='teammanager',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ralph_scrooge.Team', verbose_name='team'),
        ),
        migrations.AddField(
            model_name='teamcost',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ralph_scrooge.Team'),
        ),
        migrations.AddField(
            model_name='team',
            name='excluded_services',
            field=models.ManyToManyField(blank=True, related_name='excluded_teams', to='ralph_scrooge.Service', verbose_name='Excluded services'),
        ),
        migrations.AddField(
            model_name='team',
            name='modified_by',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='modified by'),
        ),
        migrations.AddField(
            model_name='supportcost',
            name='extra_cost_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ralph_scrooge.ExtraCostType', verbose_name='type'),
        ),
        migrations.AddField(
            model_name='serviceusagetypes',
            name='pricing_service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ralph_scrooge.PricingService', verbose_name='Pricing Service'),
        ),
        migrations.AddField(
            model_name='serviceusagetypes',
            name='usage_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_division', to='ralph_scrooge.UsageType', verbose_name='Usage type'),
        ),
        migrations.AlterUniqueTogether(
            name='serviceownership',
            unique_together=set([('owner', 'service', 'type')]),
        ),
        migrations.AlterUniqueTogether(
            name='serviceenvironment',
            unique_together=set([('service', 'environment')]),
        ),
        migrations.AddField(
            model_name='service',
            name='pricing_service',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='services', related_query_name='services', to='ralph_scrooge.PricingService', verbose_name='pricing service'),
        ),
        migrations.AddField(
            model_name='pricingservice',
            name='excluded_base_usage_types',
            field=models.ManyToManyField(blank=True, related_name='excluded_from_pricing_service', to='ralph_scrooge.UsageType', verbose_name='excluded base usage types'),
        ),
        migrations.AddField(
            model_name='pricingservice',
            name='excluded_services',
            field=models.ManyToManyField(blank=True, help_text='Services excluded from cost distribution (besides usage type excluded services)', related_name='excluded_from_pricing_services', to='ralph_scrooge.Service', verbose_name='Excluded services'),
        ),
        migrations.AddField(
            model_name='pricingservice',
            name='regular_usage_types',
            field=models.ManyToManyField(blank=True, related_name='pricing_services', to='ralph_scrooge.UsageType', verbose_name='regular usage types'),
        ),
        migrations.AddField(
            model_name='pricingservice',
            name='usage_types',
            field=models.ManyToManyField(related_name='services', related_query_name='services', through='ralph_scrooge.ServiceUsageTypes', to='ralph_scrooge.UsageType', verbose_name='usage types'),
        ),
        migrations.AlterUniqueTogether(
            name='pricingobjectmodel',
            unique_together=set([('model_id', 'type')]),
        ),
        migrations.AddField(
            model_name='historicalservice',
            name='pricing_service',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='ralph_scrooge.PricingService', verbose_name='pricing service'),
        ),
        migrations.AddField(
            model_name='extracost',
            name='extra_cost_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ralph_scrooge.ExtraCostType', verbose_name='type'),
        ),
        migrations.AddField(
            model_name='dynamicextracosttype',
            name='excluded_services',
            field=models.ManyToManyField(blank=True, help_text='Services excluded from cost distribution (besides usage type excluded services)', related_name='excluded_from_dynamic_usage_types', to='ralph_scrooge.Service', verbose_name='Excluded services'),
        ),
        migrations.AddField(
            model_name='dynamicextracostdivision',
            name='dynamic_extra_cost_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='division', to='ralph_scrooge.DynamicExtraCostType', verbose_name='type'),
        ),
        migrations.AddField(
            model_name='dynamicextracostdivision',
            name='usage_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dynamic_extra_cost_division', to='ralph_scrooge.UsageType', verbose_name='usage type'),
        ),
        migrations.AddField(
            model_name='dynamicextracost',
            name='dynamic_extra_cost_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='costs', to='ralph_scrooge.DynamicExtraCostType', verbose_name='type'),
        ),
        migrations.AddField(
            model_name='dailyvirtualinfo',
            name='virtual_info',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_virtuals', to='ralph_scrooge.VirtualInfo', verbose_name='virtual details'),
        ),
        migrations.AddField(
            model_name='dailyvipinfo',
            name='ip_info',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ip_daily_vips', to='ralph_scrooge.PricingObject', verbose_name='IP details'),
        ),
        migrations.AddField(
            model_name='dailyvipinfo',
            name='vip_info',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_vips', to='ralph_scrooge.VIPInfo', verbose_name='VIP details'),
        ),
        migrations.AddField(
            model_name='dailyusage',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ralph_scrooge.UsageType', verbose_name='daily_usages'),
        ),
        migrations.AddField(
            model_name='dailytenantinfo',
            name='tenant_info',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_tenants', to='ralph_scrooge.TenantInfo', verbose_name='tenant details'),
        ),
        migrations.AlterUniqueTogether(
            name='dailypricingobject',
            unique_together=set([('pricing_object', 'date')]),
        ),
        migrations.AddField(
            model_name='dailydatabaseinfo',
            name='database_info',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_databases', to='ralph_scrooge.DatabaseInfo', verbose_name='database details'),
        ),
        migrations.AddField(
            model_name='dailydatabaseinfo',
            name='parent_device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='daily_databases', to='ralph_scrooge.DailyAssetInfo', verbose_name='parent device'),
        ),
        migrations.AlterUniqueTogether(
            name='teammanager',
            unique_together=set([('manager', 'team')]),
        ),
        migrations.AlterUniqueTogether(
            name='serviceusagetypes',
            unique_together=set([('usage_type', 'pricing_service', 'start', 'end')]),
        ),
    ]
